<?php
namespace Webdashboard;

class Utils {
    /*
     * getBugsFromCSV()
     * fetches and a remote csv file generated by an advanced search in Bugzilla
     * @var string $csv, url of the csv file
     * @var string $full, default to false, return short or long results
     * @return array list of bugs and their description
     */
    public static function getBugsFromCSV($csv, $full = false)
    {
        $shortBugs = $fullBugs = $temp = [];

        if (($handle = fopen($csv, 'r')) !== false) {

            while (($data = fgetcsv($handle, 300, ',')) !== false) {

                if ($data[0] == 'bug_id') {
                    $fields = $data;
                    continue;
                }

                foreach ($fields as $key => $field) {
                    $temp[$field] = $data[$key];
                }

                $fullBugs[] = $temp;
                $shortBugs[$temp['bug_id']] = $temp['short_desc'];
            }

            fclose($handle);
        }

        return $full ? $fullBugs : $shortBugs;
    }

    /*
     * cacheUrl()
     * Caches a remote resource in the cache folder for 120 seconds
     *
     * @var $url, remove content
     * @var $time = 120, seconds to cache
     * @return string
     */
    public static function cacheUrl($url, $time = 120)
    {
        $cached_file = CACHE . sha1($url) . '.cache';

        if (is_file($cached_file)) {
            $age = $_SERVER['REQUEST_TIME'] - filemtime($cached_file);

            if ($age < $time) {

                return $cached_file;
            }
        }

        // Only fetch external data if we can write to Cache folder
        if (is_dir(CACHE)) {
            $file = file_get_contents($url);
            file_put_contents($cached_file, $file);

            return $cached_file;
        }

        // No caching possible, return $url
        return $url;
    }

    public static function getBugzillaLocaleField($locale) {
        $locales = [
            'ach'   => 'Acholi',
            'af'    => 'Afrikaans',
            'an'    => 'Aragonese',
            'ar'    => 'Arabic',
            'as'    => 'Assamese',
            'ast'   => 'Asturian',
            'az'    => 'Azerbaijani',
            'be'    => 'Belarusian',
            'bg'    => 'Bulgarian',
            'bn-BD' => 'Bengali (Bangladesh)',
            'bn-IN' => 'Bengali (India)',
            'br'    => 'Breton',
            'bs'    => 'Bosnian',
            'ca'    => 'Catalan',
            'cs'    => 'Czech',
            'csb'   => 'Kashubian',
            'cy'    => 'Welsh',
            'da'    => 'Danish',
            'de'    => 'German',
            'el'    => 'Greek',
            'en-GB' => 'English (British)',
            'eo'    => 'Esperanto',
            'es-AR' => 'Spanish (Argentina)',
            'es-CL' => 'Spanish (Chile)',
            'es-ES' => 'Spanish (Spain)',
            'es-MX' => 'Spanish (Mexico)',
            'et'    => 'Estonian',
            'eu'    => 'Basque',
            'fa'    => 'Persian',
            'ff'    => 'Fulah',
            'fi'    => 'Finnish',
            'fr'    => 'French',
            'fy-NL' => 'Frisian',
            'ga-IE' => 'Irish (Ireland)',
            'gd'    => 'Gaelic (Scotland)',
            'gl'    => 'Galician',
            'gu-IN' => 'Gujarati',
            'he'    => 'Hebrew',
            'hi-IN' => 'Hindi (India)',
            'hr'    => 'Croatian',
            'hu'    => 'Hungarian',
            'hy-AM' => 'Armenian',
            'id'    => 'Indonesian',
            'is'    => 'Icelandic',
            'it'    => 'Italian',
            'ja'    => 'Japanese',
            'ka'    => 'Georgian',
            'kk'    => 'Kazakh',
            'km'    => 'Khmer',
            'kn'    => 'Kannada',
            'ko'    => 'Korean',
            'ku'    => 'Kurdish',
            'lg'    => 'Luganda',
            'lij'   => 'Ligurian',
            'lt'    => 'Lithuanian',
            'lv'    => 'Latvian',
            'mai'   => 'Maithili',
            'mk'    => 'Macedonian',
            'ml'    => 'Malayalam',
            'mn'    => 'Mongolian',
            'mr'    => 'Marathi',
            'ms'    => 'Malay',
            'my'    => 'Burmese',
            'nb-NO' => 'Norwegian (BokmÃ¥l)',
            'nl'    => 'Dutch',
            'nn-NO' => 'Norwegian (Nynorsk)',
            'nso'   => 'Northern Sotho',
            'oc'    => 'Occitan (Lengadocian)',
            'or'    => 'Oriya',
            'pa-IN' => 'Punjabi',
            'pl'    => 'Polish',
            'pt-BR' => 'Portuguese (Brazilian)',
            'pt-PT' => 'Portuguese (Portugal)',
            'rm'    => 'Romansh',
            'ro'    => 'Romanian',
            'ru'    => 'Russian',
            'si'    => 'Sinhala',
            'sk'    => 'Slovak',
            'sl'    => 'Slovenian',
            'sq'    => 'Albanian',
            'sr'    => 'Serbian',
            'sv-SE' => 'Swedish',
            'sw'    => 'Swahili',
            'ta'    => 'Tamil',
            'ta-LK' => 'Tamil (Sri Lanka)',
            'te'    => 'Telugu',
            'th'    => 'Thai',
            'tr'    => 'Turkish',
            'uk'    => 'Ukrainian',
            'ur'    => 'Urdu',
            'vi'    => 'Vietnamese',
            'wo'    => 'Wolof',
            'xh'    => 'Xhosa',
            'zh-CN' => 'Chinese (Simplified)',
            'zh-TW' => 'Chinese (Traditional)',
            'zu'    => 'Zulu',
            ];

            return $locale . ' / ' . $locales[$locale];
        }

        /**
         * getUserBaseCoverage()
         *
         * @param $locales an array of locales
         * @param $no_japan boolean, default to true, do we include Japanese?
         *
         * @return a percent value of our coverage for the user base
         */

        public static function getUserBaseCoverage($locales, $no_japan = true)
        {
            $url = LANG_CHECKER . '?action=coverage&json';
            $url .= '&locales[]=' . implode('&locales[]=', array_map('urlencode', $locales));
            return file_get_contents($url);
        }

}